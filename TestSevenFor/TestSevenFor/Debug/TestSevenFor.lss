
TestSevenFor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000150  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  000001f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000773  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a5  00000000  00000000  000009fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028e  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int main(void)
{
    
    while (1) 
    {
		DDRD = 0b11111111;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
		for (z = 0; z <= 9; z++)
  aa:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
  ae:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
  b2:	1c c0       	rjmp	.+56     	; 0xec <main+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	85 ea       	ldi	r24, 0xA5	; 165
  b8:	9e e0       	ldi	r25, 0x0E	; 14
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x14>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x1e>
  c4:	00 00       	nop
		{
			_delay_ms(DLY);
			PORTD = count2 [z];
  c6:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
  ca:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	e0 50       	subi	r30, 0x00	; 0
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	80 81       	ld	r24, Z
  d8:	8b b9       	out	0x0b, r24	; 11
{
    
    while (1) 
    {
		DDRD = 0b11111111;
		for (z = 0; z <= 9; z++)
  da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
  ec:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  f0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
  f4:	0a 97       	sbiw	r24, 0x0a	; 10
  f6:	f4 f2       	brlt	.-68     	; 0xb4 <main+0xe>
		{
			_delay_ms(DLY);
			PORTD = count2 [z];
		}
		
		for (z = 9; z >= 0; z--)
  f8:	89 e0       	ldi	r24, 0x09	; 9
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 100:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 104:	1c c0       	rjmp	.+56     	; 0x13e <main+0x98>
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	85 ea       	ldi	r24, 0xA5	; 165
 10a:	9e e0       	ldi	r25, 0x0E	; 14
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x66>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x70>
 116:	00 00       	nop
		{
			_delay_ms(DLY);
			PORTD = count2 [z];
 118:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 11c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	e0 50       	subi	r30, 0x00	; 0
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	80 81       	ld	r24, Z
 12a:	8b b9       	out	0x0b, r24	; 11
		{
			_delay_ms(DLY);
			PORTD = count2 [z];
		}
		
		for (z = 9; z >= 0; z--)
 12c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 130:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 13a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 13e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 142:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 146:	99 23       	and	r25, r25
 148:	f4 f6       	brge	.-68     	; 0x106 <main+0x60>
 14a:	ad cf       	rjmp	.-166    	; 0xa6 <main>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
